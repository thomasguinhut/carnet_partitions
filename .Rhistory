"fichier_fusionne_A5.pdf")
# CHARGER LES PACKAGES ---------------------------------------------------------
packages <- c("qpdf", "dplyr", "purrr", "tidyr")
lapply(packages, function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) install.packages(pkg)
library(pkg, character.only = TRUE)
})
# LIRE LES DONNÉES -------------------------------------------------------------
bdd <- read.csv("liste.csv")
musiques_a_jouer <- bdd %>%
filter(JOUE == 1)
noms_fichiers <- musiques_a_jouer %>%
mutate(NOM_FICHIER = pmap(
list(NOM_FICHIER, NBR_VERSIONS),
~ {
nom_base <- if (!grepl("\\.pdf$", ..1)) paste0(..1, ".pdf") else ..1
if (..2 > 1) {
base_sans_ext <- sub("\\.pdf$", "", nom_base)
paste0(base_sans_ext, "-", 1:..2, ".pdf")
} else {
nom_base
}
}
)) %>%
unnest(cols = NOM_FICHIER) %>%
pull(NOM_FICHIER)
# CHEMINS DES FICHIERS ---------------------------------------------------------
dossier_source <- file.path(getwd(), "partitions")
fichier_page_garde <- file.path(getwd(), nom_page_garde)
fichier_page_garde_a5 <- "page_garde_A5.pdf"
fichier_partitions_a5 <- "partitions_A5.pdf"
fichier_final <- "fichier_fusionne_A5.pdf"
fichier_final_compressé <- "fichier_fusionne_A5_compressé.pdf"
# VERIFICATIONS ----------------------------------------------------------------
chemins_complets <- file.path(dossier_source, noms_fichiers)
chemins_existant <- chemins_complets[file.exists(chemins_complets)]
fichiers_manquants <- noms_fichiers[!file.exists(chemins_complets)]
if (length(fichiers_manquants) > 0) {
warning("⚠️ Fichiers manquants ignorés :\n", paste(fichiers_manquants, collapse = "\n"))
}
if (!file.exists(fichier_page_garde)) {
stop("❌ Le fichier 'page_garde.pdf' est introuvable.")
}
# CONVERSIONS A5 PAYSAGE -------------------------------------------------------
convert_to_a5 <- function(input, output) {
cmd <- sprintf(
'pdfjam "%s" --paper a5paper --landscape --outfile "%s"',
input, output
)
result <- system(cmd)
if (result != 0 || !file.exists(output)) {
stop("❌ La conversion en A5 a échoué pour : ", input)
}
}
# Convertir la page de garde et les partitions séparément
convert_to_a5(fichier_page_garde, fichier_page_garde_a5)
# Fusionner les partitions en un seul fichier
if (length(chemins_existant) == 0) stop("❌ Aucun fichier PDF à fusionner.")
pdf_combine(input = chemins_existant, output = "fichier_fusionne_temp.pdf")
convert_to_a5("fichier_fusionne_temp.pdf", fichier_partitions_a5)
# FUSION FINALE -----------------------------------------------------------------
pdf_combine(input = c(fichier_page_garde_a5, fichier_partitions_a5), output = fichier_final)
# CONFIRMATION -----------------------------------------------------------------
if (file.exists(fichier_final)) {
cat("✅ PDF final généré avec succès :", fichier_final, "\n")
# COMPRESSION DU FICHIER FINAL -------------------------------------------------
compression_cmd <- sprintf(
'gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/screen -dQUIET -dNOPAUSE -dBATCH -dCompressFonts=true -dDetectDuplicateImages=true -dColorImageResolution=150 -dGrayImageResolution=150 -dMonoImageResolution=150 -sOutputFile="%s" "%s"',
fichier_final_compressé, fichier_final
)
result_compression <- system(compression_cmd)
if (result_compression == 0 && file.exists(fichier_final_compressé)) {
cat("✅ PDF compressé généré avec succès :", fichier_final_compressé, "\n")
} else {
stop("❌ Échec de la compression du PDF.")
}
# Supprimer les fichiers intermédiaires après la génération du fichier final
file.remove("fichier_fusionne_temp.pdf",
"page_garde_A5.pdf",
"partitions_A5.pdf",
fichier_final)  # Supprimer le fichier non compressé
} else {
stop("❌ Échec de la génération du PDF final.")
}
# PARAMÈTRES -------------------------------------------------------------------
compression_ratio <- 0.9  # Compression à appliquer via Ghostscript
nom_page_garde <- "page_garde.pdf"
# Nettoyer les fichiers PDF générés précédemment -------------------------------
file.remove("fichier_fusionne_temp.pdf",
"page_garde_A5.pdf",
"partitions_A5.pdf",
"fichier_fusionne_A5.pdf")
# CHARGER LES PACKAGES ---------------------------------------------------------
packages <- c("qpdf", "dplyr", "purrr", "tidyr")
lapply(packages, function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) install.packages(pkg)
library(pkg, character.only = TRUE)
})
# LIRE LES DONNÉES -------------------------------------------------------------
bdd <- read.csv("liste.csv")
musiques_a_jouer <- bdd %>%
filter(JOUE == 1)
noms_fichiers <- musiques_a_jouer %>%
mutate(NOM_FICHIER = pmap(
list(NOM_FICHIER, NBR_VERSIONS),
~ {
nom_base <- if (!grepl("\\.pdf$", ..1)) paste0(..1, ".pdf") else ..1
if (..2 > 1) {
base_sans_ext <- sub("\\.pdf$", "", nom_base)
paste0(base_sans_ext, "-", 1:..2, ".pdf")
} else {
nom_base
}
}
)) %>%
unnest(cols = NOM_FICHIER) %>%
pull(NOM_FICHIER)
# CHEMINS DES FICHIERS ---------------------------------------------------------
dossier_source <- file.path(getwd(), "partitions")
fichier_page_garde <- file.path(getwd(), nom_page_garde)
fichier_page_garde_a5 <- "page_garde_A5.pdf"
fichier_partitions_a5 <- "partitions_A5.pdf"
fichier_final <- "fichier_fusionne_A5.pdf"
fichier_final_compressé <- "fichier_fusionne_A5_compressé.pdf"
# VERIFICATIONS ----------------------------------------------------------------
chemins_complets <- file.path(dossier_source, noms_fichiers)
chemins_existant <- chemins_complets[file.exists(chemins_complets)]
fichiers_manquants <- noms_fichiers[!file.exists(chemins_complets)]
if (length(fichiers_manquants) > 0) {
warning("⚠️ Fichiers manquants ignorés :\n", paste(fichiers_manquants, collapse = "\n"))
}
if (!file.exists(fichier_page_garde)) {
stop("❌ Le fichier 'page_garde.pdf' est introuvable.")
}
# CONVERSIONS A5 PAYSAGE -------------------------------------------------------
convert_to_a5 <- function(input, output) {
cmd <- sprintf(
'pdfjam "%s" --paper a5paper --landscape --outfile "%s"',
input, output
)
result <- system(cmd)
if (result != 0 || !file.exists(output)) {
stop("❌ La conversion en A5 a échoué pour : ", input)
}
}
# Convertir la page de garde et les partitions séparément
convert_to_a5(fichier_page_garde, fichier_page_garde_a5)
# Fusionner les partitions en un seul fichier
if (length(chemins_existant) == 0) stop("❌ Aucun fichier PDF à fusionner.")
pdf_combine(input = chemins_existant, output = "fichier_fusionne_temp.pdf")
convert_to_a5("fichier_fusionne_temp.pdf", fichier_partitions_a5)
# FUSION FINALE -----------------------------------------------------------------
pdf_combine(input = c(fichier_page_garde_a5, fichier_partitions_a5), output = fichier_final)
# CONFIRMATION -----------------------------------------------------------------
if (file.exists(fichier_final)) {
cat("✅ PDF final généré avec succès :", fichier_final, "\n")
# COMPRESSION DU FICHIER FINAL -------------------------------------------------
compression_cmd <- sprintf(
'gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/screen -dQUIET -dNOPAUSE -dBATCH -dCompressFonts=true -dDetectDuplicateImages=true -dColorImageResolution=150 -dGrayImageResolution=150 -dMonoImageResolution=150 -sOutputFile="%s" "%s"',
fichier_final_compressé, fichier_final
)
result_compression <- system(compression_cmd)
if (result_compression == 0 && file.exists(fichier_final_compressé)) {
cat("✅ PDF compressé généré avec succès :", fichier_final_compressé, "\n")
} else {
stop("❌ Échec de la compression du PDF.")
}
# Supprimer les fichiers intermédiaires après la génération du fichier final
file.remove("fichier_fusionne_temp.pdf",
"page_garde_A5.pdf",
"partitions_A5.pdf",
fichier_final)  # Supprimer le fichier non compressé
} else {
stop("❌ Échec de la génération du PDF final.")
}
# PARAMÈTRES -------------------------------------------------------------------
compression_ratio <- 0.75  # Compression à appliquer via Ghostscript
nom_page_garde <- "page_garde.pdf"
# Nettoyer les fichiers PDF générés précédemment -------------------------------
file.remove("fichier_fusionne_temp.pdf",
"page_garde_A5.pdf",
"partitions_A5.pdf",
"fichier_fusionne_A5.pdf")
# CHARGER LES PACKAGES ---------------------------------------------------------
packages <- c("qpdf", "dplyr", "purrr", "tidyr")
lapply(packages, function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) install.packages(pkg)
library(pkg, character.only = TRUE)
})
# LIRE LES DONNÉES -------------------------------------------------------------
bdd <- read.csv("liste.csv")
musiques_a_jouer <- bdd %>%
filter(JOUE == 1)
noms_fichiers <- musiques_a_jouer %>%
mutate(NOM_FICHIER = pmap(
list(NOM_FICHIER, NBR_VERSIONS),
~ {
nom_base <- if (!grepl("\\.pdf$", ..1)) paste0(..1, ".pdf") else ..1
if (..2 > 1) {
base_sans_ext <- sub("\\.pdf$", "", nom_base)
paste0(base_sans_ext, "-", 1:..2, ".pdf")
} else {
nom_base
}
}
)) %>%
unnest(cols = NOM_FICHIER) %>%
pull(NOM_FICHIER)
# CHEMINS DES FICHIERS ---------------------------------------------------------
dossier_source <- file.path(getwd(), "partitions")
fichier_page_garde <- file.path(getwd(), nom_page_garde)
fichier_page_garde_a5 <- "page_garde_A5.pdf"
fichier_partitions_a5 <- "partitions_A5.pdf"
fichier_final <- "fichier_fusionne_A5.pdf"
fichier_final_compressé <- "fichier_fusionne_A5_compressé.pdf"
# VERIFICATIONS ----------------------------------------------------------------
chemins_complets <- file.path(dossier_source, noms_fichiers)
chemins_existant <- chemins_complets[file.exists(chemins_complets)]
fichiers_manquants <- noms_fichiers[!file.exists(chemins_complets)]
if (length(fichiers_manquants) > 0) {
warning("⚠️ Fichiers manquants ignorés :\n", paste(fichiers_manquants, collapse = "\n"))
}
if (!file.exists(fichier_page_garde)) {
stop("❌ Le fichier 'page_garde.pdf' est introuvable.")
}
# CONVERSIONS A5 PAYSAGE -------------------------------------------------------
convert_to_a5 <- function(input, output) {
cmd <- sprintf(
'pdfjam "%s" --paper a5paper --landscape --outfile "%s"',
input, output
)
result <- system(cmd)
if (result != 0 || !file.exists(output)) {
stop("❌ La conversion en A5 a échoué pour : ", input)
}
}
# Fonction pour faire une rotation de 90 degrés sur un PDF
rotate_pdf <- function(input, output) {
cmd <- sprintf(
'qpdf "%s" --rotate=90 -- "%s"',
input, output
)
result <- system(cmd)
if (result != 0 || !file.exists(output)) {
stop("❌ La rotation a échoué pour : ", input)
}
}
# Convertir la page de garde et les partitions séparément en A5 paysage
convert_to_a5(fichier_page_garde, fichier_page_garde_a5)
# Fusionner les partitions en un seul fichier
if (length(chemins_existant) == 0) stop("❌ Aucun fichier PDF à fusionner.")
pdf_combine(input = chemins_existant, output = "fichier_fusionne_temp.pdf")
# Convertir en A5 paysage
convert_to_a5("fichier_fusionne_temp.pdf", fichier_partitions_a5)
# Vérifier et faire pivoter les fichiers si nécessaire
chemins_fichiers_final <- c(fichier_page_garde_a5, fichier_partitions_a5)
# Appliquer la rotation pour les fichiers en portrait (exemple de vérification simple)
for (fichier in chemins_fichiers_final) {
# Vérifier si le fichier est en portrait ou paysage
# Cette vérification pourrait être faite en lisant les dimensions du fichier PDF
# Utilisation de qpdf pour lire les informations de la page
pdf_info <- system(sprintf('qpdf --show-npages "%s"', fichier), intern = TRUE)
# Si le fichier a moins de 800x600 px (ou une autre logique de dimensions)
# On le considère comme étant en portrait, donc on applique la rotation
page_info <- system(sprintf('qpdf --show-pages "%s"', fichier), intern = TRUE)
if (any(grepl("Rotation: 0", page_info))) {  # Si la rotation est de 0, alors portrait
cat("🚨 Rotation appliquée sur : ", fichier, "\n")
rotated_fichier <- paste0("rotated_", fichier)
rotate_pdf(fichier, rotated_fichier)
# Remplacer le fichier original par le fichier tourné
file.rename(rotated_fichier, fichier)
}
}
# PARAMÈTRES -------------------------------------------------------------------
nom_page_garde <- "page_garde.pdf"
fichier_temp_fusion <- "fichier_fusionne_temp.pdf"
fichier_page_garde_a5 <- "page_garde_A5.pdf"
fichier_partitions_a5 <- "partitions_A5.pdf"
fichier_final <- "fichier_fusionne_A5.pdf"
# Nettoyer les fichiers PDF générés précédemment -------------------------------
fichiers_a_supprimer <- c(fichier_temp_fusion, fichier_page_garde_a5,
fichier_partitions_a5, fichier_final)
file.remove(fichiers_a_supprimer[file.exists(fichiers_a_supprimer)])
# CHARGER LES PACKAGES ---------------------------------------------------------
packages <- c("dplyr", "purrr", "tidyr")
lapply(packages, function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) install.packages(pkg)
library(pkg, character.only = TRUE)
})
# LIRE LES DONNÉES -------------------------------------------------------------
bdd <- read.csv("liste.csv")
musiques_a_jouer <- bdd %>%
filter(JOUE == 1)
noms_fichiers <- musiques_a_jouer %>%
mutate(NOM_FICHIER = pmap(
list(NOM_FICHIER, NBR_VERSIONS),
~ {
nom_base <- if (!grepl("\\.pdf$", ..1)) paste0(..1, ".pdf") else ..1
if (..2 > 1) {
base_sans_ext <- sub("\\.pdf$", "", nom_base)
paste0(base_sans_ext, "-", 1:..2, ".pdf")
} else {
nom_base
}
}
)) %>%
unnest(cols = NOM_FICHIER) %>%
pull(NOM_FICHIER)
# CHEMINS DES FICHIERS ---------------------------------------------------------
dossier_source <- file.path(getwd(), "partitions")
chemins_complets <- file.path(dossier_source, noms_fichiers)
chemins_existant <- chemins_complets[file.exists(chemins_complets)]
fichiers_manquants <- noms_fichiers[!file.exists(chemins_complets)]
if (length(fichiers_manquants) > 0) {
warning("⚠️ Fichiers manquants ignorés :\n", paste(fichiers_manquants, collapse = "\n"))
}
if (!file.exists(nom_page_garde)) {
stop("❌ Le fichier 'page_garde.pdf' est introuvable.")
}
# FONCTIONS UTILITAIRES --------------------------------------------------------
# Conversion en A5 paysage avec pdfjam
convert_to_a5 <- function(input, output) {
cmd <- sprintf('pdfjam "%s" --paper a5paper --landscape --outfile "%s"', input, output)
result <- system(cmd)
if (result != 0 || !file.exists(output)) {
stop("❌ La conversion A5 a échoué pour : ", input)
}
}
# Rotation de 90° vers la droite avec pdfjam (si besoin)
rotate_if_portrait <- function(input) {
output <- tempfile(fileext = ".pdf")
info <- system(sprintf('pdfinfo "%s"', input), intern = TRUE)
page_size <- grep("Page size", info, value = TRUE)
if (length(page_size) == 0) return(input)
dims <- as.numeric(unlist(regmatches(page_size, gregexpr("[0-9]+\\.?[0-9]*", page_size))))
if (length(dims) >= 2 && dims[1] < dims[2]) {
# Portrait → rotation
cat("📐 Rotation de 90° appliquée à :", input, "\n")
cmd <- sprintf('pdfjam --angle 90 "%s" --outfile "%s"', input, output)
result <- system(cmd)
if (result == 0 && file.exists(output)) {
return(output)
} else {
stop("❌ Rotation échouée pour : ", input)
}
}
return(input)  # Pas besoin de rotation
}
# TRAITEMENT --------------------------------------------------------------------
# 1. Convertir la page de garde en A5 paysage
convert_to_a5(nom_page_garde, fichier_page_garde_a5)
# 2. Appliquer rotation aux partitions si nécessaire
chemins_modifiés <- purrr::map_chr(chemins_existant, rotate_if_portrait)
# PARAMÈTRES -------------------------------------------------------------------
nom_page_garde <- "page_garde.pdf"
fichier_temp_fusion <- "fichier_fusionne_temp.pdf"
fichier_page_garde_a5 <- "page_garde_A5.pdf"
fichier_partitions_a5 <- "partitions_A5.pdf"
fichier_final <- "fichier_fusionne_A5.pdf"
# Nettoyer les fichiers PDF générés précédemment -------------------------------
fichiers_a_supprimer <- c(fichier_temp_fusion, fichier_page_garde_a5,
fichier_partitions_a5, fichier_final)
file.remove(fichiers_a_supprimer[file.exists(fichiers_a_supprimer)])
# CHARGER LES PACKAGES ---------------------------------------------------------
packages <- c("dplyr", "purrr", "tidyr")
lapply(packages, function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) install.packages(pkg)
library(pkg, character.only = TRUE)
})
# LIRE LES DONNÉES -------------------------------------------------------------
bdd <- read.csv("liste.csv")
musiques_a_jouer <- bdd %>%
filter(JOUE == 1)
noms_fichiers <- musiques_a_jouer %>%
mutate(NOM_FICHIER = pmap(
list(NOM_FICHIER, NBR_VERSIONS),
~ {
nom_base <- if (!grepl("\\.pdf$", ..1)) paste0(..1, ".pdf") else ..1
if (..2 > 1) {
base_sans_ext <- sub("\\.pdf$", "", nom_base)
paste0(base_sans_ext, "-", 1:..2, ".pdf")
} else {
nom_base
}
}
)) %>%
unnest(cols = NOM_FICHIER) %>%
pull(NOM_FICHIER)
# CHEMINS DES FICHIERS ---------------------------------------------------------
dossier_source <- file.path(getwd(), "partitions")
chemins_complets <- file.path(dossier_source, noms_fichiers)
chemins_existant <- chemins_complets[file.exists(chemins_complets)]
fichiers_manquants <- noms_fichiers[!file.exists(chemins_complets)]
if (length(fichiers_manquants) > 0) {
warning("⚠️ Fichiers manquants ignorés :\n", paste(fichiers_manquants, collapse = "\n"))
}
if (!file.exists(nom_page_garde)) {
stop("❌ Le fichier 'page_garde.pdf' est introuvable.")
}
# FONCTIONS UTILITAIRES --------------------------------------------------------
# Conversion en A5 paysage avec pdfjam
convert_to_a5 <- function(input, output) {
cmd <- sprintf('pdfjam "%s" --paper a5paper --landscape --outfile "%s"', input, output)
result <- system(cmd)
if (result != 0 || !file.exists(output)) {
stop("❌ La conversion A5 a échoué pour : ", input)
}
}
# Rotation de 90° vers la droite avec pdfjam (si besoin)
rotate_if_portrait <- function(input) {
output <- tempfile(fileext = ".pdf")
info <- system(sprintf('pdfinfo "%s"', input), intern = TRUE)
page_size <- grep("Page size", info, value = TRUE)
if (length(page_size) == 0) return(input)
dims <- as.numeric(unlist(regmatches(page_size, gregexpr("[0-9]+\\.?[0-9]*", page_size))))
if (length(dims) >= 2 && dims[1] < dims[2]) {
# Portrait → rotation
cat("📐 Rotation de 90° appliquée à :", input, "\n")
cmd <- sprintf('pdfjam --angle 90 "%s" --outfile "%s"', input, output)
result <- system(cmd)
if (result == 0 && file.exists(output)) {
return(output)
} else {
stop("❌ Rotation échouée pour : ", input)
}
}
return(input)  # Pas besoin de rotation
}
# TRAITEMENT --------------------------------------------------------------------
# 1. Convertir la page de garde en A5 paysage
convert_to_a5(nom_page_garde, fichier_page_garde_a5)
# 2. Appliquer rotation aux partitions si nécessaire
chemins_modifiés <- purrr::map_chr(chemins_existant, rotate_if_portrait)
# PARAMÈTRES -------------------------------------------------------------------
nom_page_garde <- "page_garde.pdf"
fichier_temp_fusion <- "fichier_fusionne_temp.pdf"
fichier_page_garde_a5 <- "page_garde_A5.pdf"
fichier_partitions_a5 <- "partitions_A5.pdf"
fichier_final <- "fichier_fusionne_A5.pdf"
# Nettoyer les anciens fichiers ------------------------------------------------
fichiers_a_supprimer <- c(fichier_temp_fusion, fichier_page_garde_a5,
fichier_partitions_a5, fichier_final)
file.remove(fichiers_a_supprimer[file.exists(fichiers_a_supprimer)])
# CHARGER LES PACKAGES ---------------------------------------------------------
packages <- c("dplyr", "purrr", "tidyr")
lapply(packages, function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) install.packages(pkg)
library(pkg, character.only = TRUE)
})
# LIRE LES DONNÉES -------------------------------------------------------------
bdd <- read.csv("liste.csv")
musiques_a_jouer <- bdd %>%
filter(JOUE == 1)
noms_fichiers <- musiques_a_jouer %>%
mutate(NOM_FICHIER = pmap(
list(NOM_FICHIER, NBR_VERSIONS),
~ {
nom_base <- if (!grepl("\\.pdf$", ..1)) paste0(..1, ".pdf") else ..1
if (..2 > 1) {
base_sans_ext <- sub("\\.pdf$", "", nom_base)
paste0(base_sans_ext, "-", 1:..2, ".pdf")
} else {
nom_base
}
}
)) %>%
unnest(cols = NOM_FICHIER) %>%
pull(NOM_FICHIER)
# CHEMINS DES FICHIERS ---------------------------------------------------------
dossier_source <- file.path(getwd(), "partitions")
chemins_complets <- file.path(dossier_source, noms_fichiers)
chemins_existant <- chemins_complets[file.exists(chemins_complets)]
fichiers_manquants <- noms_fichiers[!file.exists(chemins_complets)]
if (length(fichiers_manquants) > 0) {
warning("⚠️ Fichiers manquants ignorés :\n", paste(fichiers_manquants, collapse = "\n"))
}
if (!file.exists(nom_page_garde)) {
stop("❌ Le fichier 'page_garde.pdf' est introuvable.")
}
# FONCTION CONVERSION A5 PAYSAGE -----------------------------------------------
convert_to_a5_landscape <- function(input, output) {
cmd <- sprintf('pdfjam "%s" --paper a5paper --landscape --outfile "%s"', input, output)
result <- system(cmd)
if (result != 0 || !file.exists(output)) {
stop("❌ La conversion A5 paysage a échoué pour : ", input)
}
}
# TRAITEMENT --------------------------------------------------------------------
# 1. Convertir la page de garde
convert_to_a5_landscape(nom_page_garde, fichier_page_garde_a5)
# 2. Fusionner les partitions originales (sans rotation)
temp_partitions <- tempfile(fileext = ".pdf")
fusion_cmd <- sprintf('pdfjam %s --outfile "%s"',
paste(shQuote(chemins_existant), collapse = " "),
temp_partitions)
result <- system(fusion_cmd)
if (result != 0 || !file.exists(temp_partitions)) {
stop("❌ Fusion des partitions échouée.")
}
# 3. Convertir les partitions en A5 paysage
convert_to_a5_landscape(temp_partitions, fichier_partitions_a5)
# 4. Fusion finale avec la page de garde
fusion_finale_cmd <- sprintf('pdfjam "%s" "%s" --outfile "%s"',
fichier_page_garde_a5, fichier_partitions_a5, fichier_final)
result <- system(fusion_finale_cmd)
if (result == 0 && file.exists(fichier_final)) {
cat("✅ PDF final généré avec succès :", fichier_final, "\n")
} else {
stop("❌ Échec de la génération du PDF final.")
}
# 5. Nettoyage
file.remove(fichiers_a_supprimer[file.exists(fichiers_a_supprimer)])
