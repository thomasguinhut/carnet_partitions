)
system(pdfjam_cmd)
# Supprimer le fichier temporaire si tout s'est bien passé
if (file.exists(fichier_final)) {
file.remove(fichier_intermediaire)
cat("✅ Fichier final généré (paysage réel) :", fichier_final, "\n")
} else {
stop("La rotation en paysage avec pdfjam a échoué.")
}
} else {
stop("Aucun fichier PDF valide à fusionner.")
}
# Installer et charger les packages nécessaires
packages <- c("qpdf", "dplyr", "purrr", "tidyr")
lapply(packages, function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
library(pkg, character.only = TRUE)
})
# Lire le fichier CSV
bdd <- read.csv("liste.csv")
# Filtrer les musiques à jouer
musiques_a_jouer <- bdd %>%
filter(JOUE == 1)
# Générer les noms de fichiers (avec gestion des versions)
noms_fichiers <- musiques_a_jouer %>%
mutate(NOM_FICHIER = pmap(
list(NOM_FICHIER, NBR_VERSIONS),
~ {
nom_base <- if (!grepl("\\.pdf$", ..1)) paste0(..1, ".pdf") else ..1
if (..2 > 1) {
base_sans_ext <- sub("\\.pdf$", "", nom_base)
paste0(base_sans_ext, "-", 1:..2, ".pdf")
} else {
nom_base
}
}
)) %>%
unnest(cols = NOM_FICHIER) %>%
pull(NOM_FICHIER)
# Définir chemins
dossier_source <- file.path(getwd(), "partitions")
fichier_page_garde <- file.path(getwd(), "page_garde.pdf")
fichier_intermediaire <- file.path(getwd(), "fichier_fusionne_temp.pdf")
fichier_final <- file.path(getwd(), "fichier_fusionne_A4.pdf")
# Vérifier que les fichiers existent
chemins_complets <- file.path(dossier_source, noms_fichiers)
chemins_existant <- chemins_complets[file.exists(chemins_complets)]
fichiers_manquants <- noms_fichiers[!file.exists(chemins_complets)]
if (length(fichiers_manquants) > 0) {
warning("Fichiers manquants ignorés :\n", paste(fichiers_manquants, collapse = "\n"))
}
# Ajouter la page de garde si elle existe
if (!file.exists(fichier_page_garde)) {
stop("Le fichier page_garde.pdf est introuvable.")
}
# Fusionner
if (length(chemins_existant) > 0) {
fichiers_a_fusionner <- c(fichier_page_garde, chemins_existant)
pdf_combine(input = fichiers_a_fusionner, output = fichier_intermediaire)
cat("Fusion avec page de garde terminée. Rotation en paysage réel...\n")
# Appliquer la rotation paysage avec pdfjam
pdfjam_cmd <- sprintf(
"pdfjam \"%s\" --landscape --outfile \"%s\"",
fichier_intermediaire, fichier_final
)
system(pdfjam_cmd)
# Supprimer le fichier temporaire si tout s'est bien passé
if (file.exists(fichier_final)) {
file.remove(fichier_intermediaire)
cat("✅ Fichier final généré (paysage réel) :", fichier_final, "\n")
} else {
stop("La rotation en paysage avec pdfjam a échoué.")
}
} else {
stop("Aucun fichier PDF valide à fusionner.")
}
# Installer et charger les packages nécessaires
packages <- c("qpdf", "dplyr", "purrr", "tidyr")
lapply(packages, function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
library(pkg, character.only = TRUE)
})
# Lire le fichier CSV
bdd <- read.csv("liste.csv")
# Filtrer les musiques à jouer
musiques_a_jouer <- bdd %>%
filter(JOUE == 1)
# Générer les noms de fichiers
noms_fichiers <- musiques_a_jouer %>%
mutate(NOM_FICHIER = pmap(
list(NOM_FICHIER, NBR_VERSIONS),
~ {
nom_base <- if (!grepl("\\.pdf$", ..1)) paste0(..1, ".pdf") else ..1
if (..2 > 1) {
base_sans_ext <- sub("\\.pdf$", "", nom_base)
paste0(base_sans_ext, "-", 1:..2, ".pdf")
} else {
nom_base
}
}
)) %>%
unnest(cols = NOM_FICHIER) %>%
pull(NOM_FICHIER)
# Définir chemins
dossier_source <- file.path(getwd(), "partitions")
fichier_page_garde <- file.path(getwd(), "page_garde.pdf")
fichier_partitions_temp <- file.path(getwd(), "partitions_temp.pdf")
fichier_partitions_paysage <- file.path(getwd(), "partitions_paysage.pdf")
fichier_final <- file.path(getwd(), "fichier_fusionne_A4.pdf")
# Vérifier que les fichiers existent
chemins_complets <- file.path(dossier_source, noms_fichiers)
chemins_existant <- chemins_complets[file.exists(chemins_complets)]
fichiers_manquants <- noms_fichiers[!file.exists(chemins_complets)]
if (length(fichiers_manquants) > 0) {
warning("Fichiers manquants ignorés :\n", paste(fichiers_manquants, collapse = "\n"))
}
if (!file.exists(fichier_page_garde)) {
stop("Le fichier page_garde.pdf est introuvable.")
}
# Fusionner uniquement les partitions
if (length(chemins_existant) > 0) {
pdf_combine(input = chemins_existant, output = fichier_partitions_temp)
# Appliquer paysage uniquement aux partitions
pdfjam_cmd <- sprintf(
"pdfjam \"%s\" --landscape --fitpaper true --outfile \"%s\"",
fichier_partitions_temp, fichier_partitions_paysage
)
system(pdfjam_cmd)
if (!file.exists(fichier_partitions_paysage)) {
stop("Échec de la rotation paysage des partitions.")
}
# Fusion finale : page de garde (portrait) + partitions (paysage)
pdf_combine(
input = c(fichier_page_garde, fichier_partitions_paysage),
output = fichier_final
)
cat("✅ Fichier final généré :", fichier_final, "\n")
# Nettoyage
file.remove(fichier_partitions_temp, fichier_partitions_paysage)
} else {
stop("Aucun fichier PDF valide à fusionner.")
}
# Installer et charger les packages nécessaires
packages <- c("qpdf", "dplyr", "purrr", "tidyr")
lapply(packages, function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
library(pkg, character.only = TRUE)
})
# Fonction pour compresser un PDF avec Ghostscript
compresser_pdf <- function(fichier_entree, fichier_sortie, niveau_qualite = "ebook") {
gs_cmd <- sprintf(
"gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/%s -dNOPAUSE -dQUIET -dBATCH -sOutputFile=\"%s\" \"%s\"",
niveau_qualite, fichier_sortie, fichier_entree
)
system(gs_cmd)
}
# Lire le fichier CSV
bdd <- read.csv("liste.csv")
# Filtrer les musiques à jouer
musiques_a_jouer <- bdd %>% filter(JOUE == 1)
# Générer les noms de fichiers avec gestion des versions
noms_fichiers <- musiques_a_jouer %>%
mutate(NOM_FICHIER = pmap(
list(NOM_FICHIER, NBR_VERSIONS),
~ {
nom_base <- if (!grepl("\\.pdf$", ..1)) paste0(..1, ".pdf") else ..1
if (..2 > 1) {
base_sans_ext <- sub("\\.pdf$", "", nom_base)
paste0(base_sans_ext, "-", 1:..2, ".pdf")
} else {
nom_base
}
}
)) %>%
unnest(cols = NOM_FICHIER) %>%
pull(NOM_FICHIER)
# Définir les chemins
dossier_source <- file.path(getwd(), "partitions")
fichier_page_garde <- file.path(getwd(), "page_garde.pdf")
fichier_partitions_temp <- file.path(getwd(), "partitions_temp.pdf")
fichier_partitions_paysage <- file.path(getwd(), "partitions_paysage.pdf")
fichier_fusion <- file.path(getwd(), "fichier_fusionne_A4.pdf")
fichier_compresse <- file.path(getwd(), "fichier_fusionne_A4_compresse.pdf")
# Vérifier les fichiers
chemins_complets <- file.path(dossier_source, noms_fichiers)
chemins_existant <- chemins_complets[file.exists(chemins_complets)]
fichiers_manquants <- noms_fichiers[!file.exists(chemins_complets)]
if (length(fichiers_manquants) > 0) {
warning("Fichiers manquants ignorés :\n", paste(fichiers_manquants, collapse = "\n"))
}
if (!file.exists(fichier_page_garde)) {
stop("Le fichier page_garde.pdf est introuvable.")
}
# Fusionner uniquement les partitions
if (length(chemins_existant) > 0) {
pdf_combine(input = chemins_existant, output = fichier_partitions_temp)
# Rotation en paysage avec pdfjam
pdfjam_cmd <- sprintf(
"pdfjam \"%s\" --landscape --fitpaper true --outfile \"%s\"",
fichier_partitions_temp, fichier_partitions_paysage
)
system(pdfjam_cmd)
if (!file.exists(fichier_partitions_paysage)) {
stop("Échec de la rotation paysage des partitions.")
}
# Fusion finale : page de garde (portrait) + partitions (paysage)
pdf_combine(
input = c(fichier_page_garde, fichier_partitions_paysage),
output = fichier_fusion
)
cat("✅ Fusion finale terminée :", fichier_fusion, "\n")
# Compression du fichier final
compresser_pdf(fichier_fusion, fichier_compresse, "ebook")
if (file.exists(fichier_compresse)) {
cat("✅ Compression réussie :", fichier_compresse, "\n")
} else {
stop("Échec de la compression avec Ghostscript.")
}
# Nettoyage
file.remove(fichier_partitions_temp, fichier_partitions_paysage)
} else {
stop("Aucun fichier PDF valide à fusionner.")
}
# Installer et charger les packages nécessaires
packages <- c("qpdf", "dplyr", "purrr", "tidyr")
lapply(packages, function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
library(pkg, character.only = TRUE)
})
# Fonction de compression agressive via Ghostscript
compresser_pdf <- function(fichier_entree, fichier_sortie) {
gs_cmd <- paste(
"gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4",
"-dDownsampleColorImages=true -dColorImageResolution=72",
"-dDownsampleGrayImages=true -dGrayImageResolution=72",
"-dDownsampleMonoImages=true -dMonoImageResolution=150",
"-dNOPAUSE -dBATCH -dQUIET",
sprintf("-sOutputFile=\"%s\" \"%s\"", fichier_sortie, fichier_entree)
)
system(gs_cmd)
}
# Lire le fichier CSV
bdd <- read.csv("liste.csv")
# Filtrer les musiques à jouer
musiques_a_jouer <- bdd %>% filter(JOUE == 1)
# Générer les noms de fichiers avec gestion des versions
noms_fichiers <- musiques_a_jouer %>%
mutate(NOM_FICHIER = pmap(
list(NOM_FICHIER, NBR_VERSIONS),
~ {
nom_base <- if (!grepl("\\.pdf$", ..1)) paste0(..1, ".pdf") else ..1
if (..2 > 1) {
base_sans_ext <- sub("\\.pdf$", "", nom_base)
paste0(base_sans_ext, "-", 1:..2, ".pdf")
} else {
nom_base
}
}
)) %>%
unnest(cols = NOM_FICHIER) %>%
pull(NOM_FICHIER)
# Définir les chemins
dossier_source <- file.path(getwd(), "partitions")
fichier_page_garde <- file.path(getwd(), "page_garde.pdf")
fichier_partitions_temp <- file.path(getwd(), "partitions_temp.pdf")
fichier_partitions_paysage <- file.path(getwd(), "partitions_paysage.pdf")
fichier_fusion <- file.path(getwd(), "fichier_fusionne_A4.pdf")
fichier_compresse <- file.path(getwd(), "fichier_fusionne_A4_compresse.pdf")
# Vérifier les fichiers
chemins_complets <- file.path(dossier_source, noms_fichiers)
chemins_existant <- chemins_complets[file.exists(chemins_complets)]
fichiers_manquants <- noms_fichiers[!file.exists(chemins_complets)]
if (length(fichiers_manquants) > 0) {
warning("Fichiers manquants ignorés :\n", paste(fichiers_manquants, collapse = "\n"))
}
if (!file.exists(fichier_page_garde)) {
stop("Le fichier page_garde.pdf est introuvable.")
}
# Fusionner les partitions
if (length(chemins_existant) > 0) {
# Étape 1 : fusion brute
pdf_combine(input = chemins_existant, output = fichier_partitions_temp)
# Étape 2 : rotation paysage
pdfjam_cmd <- sprintf(
"pdfjam \"%s\" --landscape --fitpaper true --outfile \"%s\"",
fichier_partitions_temp, fichier_partitions_paysage
)
system(pdfjam_cmd)
if (!file.exists(fichier_partitions_paysage)) {
stop("Échec de la rotation paysage.")
}
# Étape 3 : fusion avec la page de garde
pdf_combine(
input = c(fichier_page_garde, fichier_partitions_paysage),
output = fichier_fusion
)
cat("✅ Fusion finale terminée :", fichier_fusion, "\n")
# Étape 4 : compression agressive
compresser_pdf(fichier_fusion, fichier_compresse)
if (file.exists(fichier_compresse)) {
cat("✅ Compression réussie :", fichier_compresse, "\n")
} else {
stop("Échec de la compression Ghostscript.")
}
# Nettoyage
file.remove(fichier_partitions_temp, fichier_partitions_paysage)
} else {
stop("Aucun fichier PDF valide à fusionner.")
}
file.info("fichier_fusionne_A4_compresse.pdf")$size / 1024^2  # en Mo
# Paramètre utilisateur : taux de compression en pourcentage (entre 10 et 100)
compression_pourcent <- 30  # Exemple : 50% = compression modérée
# Installer et charger les packages nécessaires
packages <- c("qpdf", "dplyr", "purrr", "tidyr")
lapply(packages, function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
library(pkg, character.only = TRUE)
})
# Fonction de compression personnalisée
compresser_pdf <- function(fichier_entree, fichier_sortie, compression_percent = 100) {
# Clamp compression pour éviter les extrêmes
compression_percent <- max(min(compression_percent, 100), 10)
scale <- compression_percent / 100
# Résolutions calculées selon le pourcentage (base = 300 dpi)
res_color <- as.integer(300 * scale)
res_gray <- as.integer(300 * scale)
res_mono <- as.integer(600 * scale)  # les images mono tolèrent une plus haute résolution
gs_cmd <- paste(
"gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4",
sprintf("-dDownsampleColorImages=true -dColorImageResolution=%d", res_color),
sprintf("-dDownsampleGrayImages=true -dGrayImageResolution=%d", res_gray),
sprintf("-dDownsampleMonoImages=true -dMonoImageResolution=%d", res_mono),
"-dNOPAUSE -dBATCH -dQUIET",
sprintf("-sOutputFile=\"%s\" \"%s\"", fichier_sortie, fichier_entree)
)
system(gs_cmd)
}
# Lire le fichier CSV
bdd <- read.csv("liste.csv")
# Filtrer les musiques à jouer
musiques_a_jouer <- bdd %>% filter(JOUE == 1)
# Générer les noms de fichiers avec gestion des versions
noms_fichiers <- musiques_a_jouer %>%
mutate(NOM_FICHIER = pmap(
list(NOM_FICHIER, NBR_VERSIONS),
~ {
nom_base <- if (!grepl("\\.pdf$", ..1)) paste0(..1, ".pdf") else ..1
if (..2 > 1) {
base_sans_ext <- sub("\\.pdf$", "", nom_base)
paste0(base_sans_ext, "-", 1:..2, ".pdf")
} else {
nom_base
}
}
)) %>%
unnest(cols = NOM_FICHIER) %>%
pull(NOM_FICHIER)
# Définir les chemins
dossier_source <- file.path(getwd(), "partitions")
fichier_page_garde <- file.path(getwd(), "page_garde.pdf")
fichier_partitions_temp <- file.path(getwd(), "partitions_temp.pdf")
fichier_partitions_paysage <- file.path(getwd(), "partitions_paysage.pdf")
fichier_fusion <- file.path(getwd(), "fichier_fusionne_A4.pdf")
fichier_compresse <- file.path(getwd(), "fichier_fusionne_A4_compresse.pdf")
# Vérifier les fichiers
chemins_complets <- file.path(dossier_source, noms_fichiers)
chemins_existant <- chemins_complets[file.exists(chemins_complets)]
fichiers_manquants <- noms_fichiers[!file.exists(chemins_complets)]
if (length(fichiers_manquants) > 0) {
warning("Fichiers manquants ignorés :\n", paste(fichiers_manquants, collapse = "\n"))
}
if (!file.exists(fichier_page_garde)) {
stop("Le fichier page_garde.pdf est introuvable.")
}
# Fusionner les partitions
if (length(chemins_existant) > 0) {
# Étape 1 : fusion brute
pdf_combine(input = chemins_existant, output = fichier_partitions_temp)
# Étape 2 : rotation paysage
pdfjam_cmd <- sprintf(
"pdfjam \"%s\" --landscape --fitpaper true --outfile \"%s\"",
fichier_partitions_temp, fichier_partitions_paysage
)
system(pdfjam_cmd)
if (!file.exists(fichier_partitions_paysage)) {
stop("Échec de la rotation paysage.")
}
# Étape 3 : fusion avec la page de garde
pdf_combine(
input = c(fichier_page_garde, fichier_partitions_paysage),
output = fichier_fusion
)
cat("✅ Fusion finale terminée :", fichier_fusion, "\n")
# Étape 4 : compression avec niveau ajustable
compresser_pdf(fichier_fusion, fichier_compresse, compression_pourcent)
if (file.exists(fichier_compresse)) {
cat(sprintf("✅ Compression réussie (qualité %d%%) : %s\n", compression_pourcent, fichier_compresse))
} else {
stop("Échec de la compression Ghostscript.")
}
# Nettoyage des fichiers intermédiaires
file.remove(fichier_partitions_temp, fichier_partitions_paysage)
} else {
stop("Aucun fichier PDF valide à fusionner.")
}
# Paramètre utilisateur : taux de compression en pourcentage (entre 10 et 100)
compression_pourcent <- 40  # Exemple : 50% = compression modérée
# Installer et charger les packages nécessaires
packages <- c("qpdf", "dplyr", "purrr", "tidyr")
lapply(packages, function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
library(pkg, character.only = TRUE)
})
# Fonction de compression personnalisée
compresser_pdf <- function(fichier_entree, fichier_sortie, compression_percent = 100) {
# Clamp compression pour éviter les extrêmes
compression_percent <- max(min(compression_percent, 100), 10)
scale <- compression_percent / 100
# Résolutions calculées selon le pourcentage (base = 300 dpi)
res_color <- as.integer(300 * scale)
res_gray <- as.integer(300 * scale)
res_mono <- as.integer(600 * scale)  # les images mono tolèrent une plus haute résolution
gs_cmd <- paste(
"gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4",
sprintf("-dDownsampleColorImages=true -dColorImageResolution=%d", res_color),
sprintf("-dDownsampleGrayImages=true -dGrayImageResolution=%d", res_gray),
sprintf("-dDownsampleMonoImages=true -dMonoImageResolution=%d", res_mono),
"-dNOPAUSE -dBATCH -dQUIET",
sprintf("-sOutputFile=\"%s\" \"%s\"", fichier_sortie, fichier_entree)
)
system(gs_cmd)
}
# Lire le fichier CSV
bdd <- read.csv("liste.csv")
# Filtrer les musiques à jouer
musiques_a_jouer <- bdd %>% filter(JOUE == 1)
# Générer les noms de fichiers avec gestion des versions
noms_fichiers <- musiques_a_jouer %>%
mutate(NOM_FICHIER = pmap(
list(NOM_FICHIER, NBR_VERSIONS),
~ {
nom_base <- if (!grepl("\\.pdf$", ..1)) paste0(..1, ".pdf") else ..1
if (..2 > 1) {
base_sans_ext <- sub("\\.pdf$", "", nom_base)
paste0(base_sans_ext, "-", 1:..2, ".pdf")
} else {
nom_base
}
}
)) %>%
unnest(cols = NOM_FICHIER) %>%
pull(NOM_FICHIER)
# Définir les chemins
dossier_source <- file.path(getwd(), "partitions")
fichier_page_garde <- file.path(getwd(), "page_garde.pdf")
fichier_partitions_temp <- file.path(getwd(), "partitions_temp.pdf")
fichier_partitions_paysage <- file.path(getwd(), "partitions_paysage.pdf")
fichier_fusion <- file.path(getwd(), "fichier_fusionne_A4.pdf")
fichier_compresse <- file.path(getwd(), "fichier_fusionne_A4_compresse.pdf")
# Vérifier les fichiers
chemins_complets <- file.path(dossier_source, noms_fichiers)
chemins_existant <- chemins_complets[file.exists(chemins_complets)]
fichiers_manquants <- noms_fichiers[!file.exists(chemins_complets)]
if (length(fichiers_manquants) > 0) {
warning("Fichiers manquants ignorés :\n", paste(fichiers_manquants, collapse = "\n"))
}
if (!file.exists(fichier_page_garde)) {
stop("Le fichier page_garde.pdf est introuvable.")
}
# Fusionner les partitions
if (length(chemins_existant) > 0) {
# Étape 1 : fusion brute
pdf_combine(input = chemins_existant, output = fichier_partitions_temp)
# Étape 2 : rotation paysage
pdfjam_cmd <- sprintf(
"pdfjam \"%s\" --landscape --fitpaper true --outfile \"%s\"",
fichier_partitions_temp, fichier_partitions_paysage
)
system(pdfjam_cmd)
if (!file.exists(fichier_partitions_paysage)) {
stop("Échec de la rotation paysage.")
}
# Étape 3 : fusion avec la page de garde
pdf_combine(
input = c(fichier_page_garde, fichier_partitions_paysage),
output = fichier_fusion
)
cat("✅ Fusion finale terminée :", fichier_fusion, "\n")
# Étape 4 : compression avec niveau ajustable
compresser_pdf(fichier_fusion, fichier_compresse, compression_pourcent)
if (file.exists(fichier_compresse)) {
cat(sprintf("✅ Compression réussie (qualité %d%%) : %s\n", compression_pourcent, fichier_compresse))
} else {
stop("Échec de la compression Ghostscript.")
}
# Nettoyage des fichiers intermédiaires
file.remove(fichier_partitions_temp, fichier_partitions_paysage)
} else {
stop("Aucun fichier PDF valide à fusionner.")
}
